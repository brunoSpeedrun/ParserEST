/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.mosaicosolutions.ParserEST;

import br.com.mosaicosolutions.parser.ParseException;
import br.com.mosaicosolutions.parser.Parser;
import br.com.mosaicosolutions.parser.TokenMgrError;
import java.io.File;
import java.io.StringReader;

/**
 * JFrame Principal do programa.
 * @author BrunoXavier
 */
public class MainJFrame extends javax.swing.JFrame {
    
    //o arquivo atual.
    private File currentFile;
    //o título padrão do arquivo.
    private final String defaultFileName = "untitled";
    //armazena um valor se indica se o arquivo está salvo ou não.
    private boolean fileSaved;
    
    /**
     * Creates new form MainJFrame
     */
    public MainJFrame() {
        initComponents();
        initFields();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPaneTextEditor = new javax.swing.JScrollPane();
        textEditor = new br.com.mosaicosolutions.ParserEST.UI.JTextEditor();
        jMenuBar = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuItemNewFile = new javax.swing.JMenuItem();
        jMenuItemOpenFile = new javax.swing.JMenuItem();
        jMenuItemSaveFile = new javax.swing.JMenuItem();
        jMenuItemSaveFileAs = new javax.swing.JMenuItem();
        jSeparator = new javax.swing.JPopupMenu.Separator();
        jMenuItemExit = new javax.swing.JMenuItem();
        jMenuEdit = new javax.swing.JMenu();
        jMenuItemEditFont = new javax.swing.JMenuItem();
        jMenuAbout = new javax.swing.JMenu();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuExit = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Parser EST");
        setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        setMinimumSize(null);
        setSize(new java.awt.Dimension(625, 465));

        textEditor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textEditorKeyPressed(evt);
            }
        });
        jScrollPaneTextEditor.setViewportView(textEditor);

        jMenuFile.setText("File");

        jMenuItemNewFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemNewFile.setText("New");
        jMenuFile.add(jMenuItemNewFile);

        jMenuItemOpenFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemOpenFile.setText("Open");
        jMenuFile.add(jMenuItemOpenFile);

        jMenuItemSaveFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemSaveFile.setText("Save");
        jMenuFile.add(jMenuItemSaveFile);

        jMenuItemSaveFileAs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemSaveFileAs.setText("Save As...");
        jMenuFile.add(jMenuItemSaveFileAs);
        jMenuFile.add(jSeparator);

        jMenuItemExit.setText("Exit");
        jMenuFile.add(jMenuItemExit);

        jMenuBar.add(jMenuFile);

        jMenuEdit.setText("Edit");

        jMenuItemEditFont.setText("Font");
        jMenuEdit.add(jMenuItemEditFont);

        jMenuBar.add(jMenuEdit);

        jMenuAbout.setText("About");
        jMenuBar.add(jMenuAbout);

        jMenu1.setText("Parser");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ENTER, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Start Parser");
        jMenu1.add(jMenuItem1);

        jMenuBar.add(jMenu1);

        jMenuExit.setText("Exit");
        jMenuBar.add(jMenuExit);

        setJMenuBar(jMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPaneTextEditor, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 625, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPaneTextEditor, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 444, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void textEditorKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textEditorKeyPressed
        // TODO add your handling code here:
        if(fileSaved) {
            fileSaved = false;
            setUnsavedFileTitle();
        }
    }//GEN-LAST:event_textEditorKeyPressed

    /**
     * Ponto de entrada do programa.
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainJFrame().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenuAbout;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JMenu jMenuEdit;
    private javax.swing.JMenu jMenuExit;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItemEditFont;
    private javax.swing.JMenuItem jMenuItemExit;
    private javax.swing.JMenuItem jMenuItemNewFile;
    private javax.swing.JMenuItem jMenuItemOpenFile;
    private javax.swing.JMenuItem jMenuItemSaveFile;
    private javax.swing.JMenuItem jMenuItemSaveFileAs;
    private javax.swing.JScrollPane jScrollPaneTextEditor;
    private javax.swing.JPopupMenu.Separator jSeparator;
    private br.com.mosaicosolutions.ParserEST.UI.JTextEditor textEditor;
    // End of variables declaration//GEN-END:variables
    
    /**
     * Inicializa os atributos.
     */
    private void initFields() {
        fileSaved = false;
        setTitle(getTitle() + " - " + defaultFileName);
    }
    
    private void setUnsavedFileTitle() {
        if(currentFile == null)     
            setTitle(getTitle() + " - " + defaultFileName + " *");
        else
            setTitle(getTitle() + " - " + currentFile.getName() + " *");
    }
    
    /**
     * Inicializa a análise sintatica com o texto do {@link MainJFrame#textEditor}
     * @throws TokenMgrError  Se for encontrado algum token iválido durante a análise.
     * @throws ParseException Se ocorrer algum erro durante a análise.
     */
    private void startParser() throws TokenMgrError, ParseException {
        Parser parser = new Parser(new StringReader(textEditor.getText()));
        parser.Start();
    }
}
